// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
// Kellan Delaney
// 07/10/2020

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 255);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bitLoc, i, mask;
        let address = (y * 32) + (x / 16);
        let bitLoc = x - (x / 16 * 16);
        let mask = 1;
        while (i < bitLoc) {
            let mask = Math.multiply(2, mask);
            let i = i + 1;
        }
        if (color) {
            let screen[address] = screen[address] | mask;
        } else {
            let screen[address] = screen[address] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx, temp;
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let adyMinusbdx = 0;
        if (dy = 0) {
            while ((a < dx) | (a = dx)) {
                do Screen.drawPixel(x1 + a, y1);
                let a = a + 1;
            }
            return;
        }
        if (dx = 0) {
            if (y1 > y2) {
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
                let dy = y2 - y1;
            }
            while ((b < dy) | (b = dy)) {
                do Screen.drawPixel(x1, y1 + b);
                let b = b + 1;
            }
            return;
        }
        while (((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            } else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        while (((a < dx) | (a = dx)) & ((b > dy) | (b = dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (adyMinusbdx < 0) {
                let b = b - 1;
                let adyMinusbdx = adyMinusbdx + dx;
            } else {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy, b;
        let dy = y2 - y1;
        while ((b < dy) | (b = dy)) {
            do Screen.drawLine(x1, y1 + b, x2, y1 + b);
            let b = b + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, rsqMinusdysq;
        let dy = -r;
        while ((dy < r) | (dy = r)) {
            let rsqMinusdysq = (r * r) - (dy * dy);
            do Screen.drawLine(x - Math.sqrt(rsqMinusdysq), y + dy, x + Math.sqrt(rsqMinusdysq), y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
