// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
// Kellan Delaney
// 07/09/2020

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe[i - 1] + twoToThe[i - 1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, nx, ny, j;
        let nx = Math.abs(x);
        let ny = Math.abs(y);
        let sum = 0;
        let shiftedX = nx;
        let j = 0;
        while (j < 16) {
            if (Math.bit(ny, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            let sum = -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, nx, ny;
        let nx = Math.abs(x);
        let ny = Math.abs(y);
        if (ny > nx) {
            return 0;
        }
        let q = Math.divide(nx, Math.multiply(2, ny));
        if ((nx - (Math.multiply(2, Math.multiply(q, ny)))) < ny) {
            if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
                let q = -q;
            }
            return (2 * q);
        } else {
            if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
                let q = -q;
            }
            return (2 * q + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, c, csq;
        let y = 0;
        let j = 7;
        while (j > -1) {
            let c = y + twoToThe[j];
            let csq = Math.multiply(c, c);
            if ((csq > 0) & ((csq < x) | (csq = x))) {
                let y = c;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns true if the jth bit of the integer x is 1 and false otherwise. */
    function int bit(int x, int j) {
        return ((twoToThe[j] & x) > 0);
    } 
}
